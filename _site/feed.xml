<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-17T22:43:51+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">whereistejas</title><subtitle>All good things take time.
</subtitle><author><name>Tejas Sanap</name></author><entry><title type="html">How to do IRC the right way (Part 3)</title><link href="http://localhost:4000/2019/07/04/IRC.part3/" rel="alternate" type="text/html" title="How to do IRC the right way (Part 3)" /><published>2019-07-04T00:00:00+05:30</published><updated>2019-07-04T00:00:00+05:30</updated><id>http://localhost:4000/2019/07/04/IRC.part3</id><content type="html" xml:base="http://localhost:4000/2019/07/04/IRC.part3/">## What is ZNC (and, BNC)?
ZNC, is an advanced IRC bouncer that is left connected so an IRC client can disconnect/reconnect without losing the chat session. A BNC (short for Bounced Network Connection) is a piece of software that is used to relay traffic and connections in computer networks, much like a proxy. Basically, ZNC will act as a bridge between a client and the IRC server.

[![](/assets/images/irc-setup-part3/ZNC-network1.png)](https://wiki.znc.in/ZNC)
&lt;div class=&quot;image-caption&quot;&gt;
This is how ZNC works.
&lt;/div&gt;

ZNC offers some strong features, listed below:
1. **Modules** - Modules are used to extend and modify the way ZNC functions. Modules can be `perl`, `C++` or `python` scripts. They can be added on global, per-network or per-user basis.
2. **Multiple Users, Networks and Clients** - That's pretty self-explanatory. Interestingly, an `admin` can limit the max no. of networks that an user can connects with.
3. **Playback Buffers** - When a client attaches to ZNC, ZNC playbacks all the conversations that took place while the client was detached. It also remembers which channels the user joined and left, all of this is also reflected in other clients.
4. **SSL Support** - Always needed.

## How do we setup ZNC?
This needs to occur in four steps:
1. Install `znc` on a server. The word 'server' is very important here. ZNC needs to be installed on a machine that is always running and always connected to the internet. Once the ZNC service has started, no changes should be made in `znc.conf`, manually.
2. Generate an initial config file using `znc --makeconf` and configure it.
3. Configure which networks and channels to connect to using the `znc webadmin`.
4. Configure the IRC client to connect to ZNC.

## Step 1: Install ZNC on your server.
In my own setup, I use a VM (Compute Engine) running on Google Cloud Platform. Free credits can be obtained by applying for the [GitHub Student Developer Pack](https://education.github.com/pack). They provide AWS credits, Digital Ocean credits and much more.

ZNC should be operated on a seperate port. A new firewall rule has to be created to enable that port.

![](/assets/images/irc-setup-part3/GCP-firewall-1.png)
&lt;div class=&quot;image-caption&quot;&gt;
You can find the firewall settings in the VCP Networks submenu.
&lt;/div&gt;

![](/assets/images/irc-setup-part3/GCP-firewall-2.png)
&lt;div class=&quot;image-caption&quot;&gt;
In my setup, I use port 5999.
&lt;/div&gt;

To do so in GCP you will need to create a new firewall rule. Also, you will need to enable both `HTTP` and `HTTPS` protocols on your VM. After, enabling the port, we will have to install `znc` and `znc-dev`. We need `znc-dev` in order to install and build modules.

```
sudo add-apt-repository ppa:teward/znc
sudo apt-get update
sudo apt-get install znc znc-dev
```

## Step 2: Setup the initial ZNC config.
ZNC can be configured in two ways, using the `znc.conf` or using the `webadmin` interface. However, to perform the initial configuration ZNC has the `--makeconf` option. It will ask you to create a ZNC username and password, which will enable you to access the `webadmin` interface. The initial configuration process generates global, user, network and channel settings.
```bash
 ~ &gt; znc --makeconf
 [ .. ] Checking for list of available modules...
 [ » ] ok
 [ ** ]
 [ ** ] -- Global settings --
 [ ** ]
 [ ?? ] Listen on port (1025 to 65534): 5999
 [ ?? ] Listen using SSL (yes/no) [no]: yes
 [ ?? ] Listen using both IPv4 and IPv6 (yes/no) [yes]: yes
 [ .. ] Verifying the listener...
 [ » ] ok
 [ ** ] Unable to locate pem file: [/home/xxxxx/.znc/znc.pem], creating it
 [ .. ] Writing Pem file [/home/xxxxx/.znc/znc.pem]...
 [ » ] ok
 [ ** ] Enabled global modules [webadmin]
 [ ** ]
 [ ** ] -- Admin user settings --
 [ ** ]
 [ ?? ] Username (alphanumeric): tejas
 [ ?? ] Enter password:
 [ ?? ] Confirm password:
 [ ?? ] Nick [whereistejas]:
 [ ?? ] Alternate nick [whereistejas_]:
 [ ?? ] Ident [tejassanap]:
 [ ?? ] Real name [Got ZNC?]: Tejas Sanap
 [ ?? ] Bind host (optional):
 [ ** ] Enabled user modules [chansaver, controlpanel]
 [ ** ]
```
Next, you will be asked to set up an IRC network. You don't have to say *yes* since, this can also be done through the `webadmin` interface.
```bash
 [ ?? ] Set up a network? (yes/no) [yes]: yes
 [ ** ]
 [ ** ] -- Network settings --
 [ ** ]
 [ ?? ] Name [freenode]:
 [ ?? ] Server host [chat.freenode.net]:
 [ ?? ] Server uses SSL? (yes/no) [yes]: yes
 [ ?? ] Server port (1 to 65535) [6697]:
 [ ?? ] Server password (probably empty):
 [ ?? ] Initial channels: #freenode
 [ ** ] Enabled network modules [simple_away]
 [ ** ]
 [ .. ] Writing config [/home/xxxxx/.znc/configs/znc.conf]...
 [ » ] ok
 [ ** ]
 [ ** ] To connect to this ZNC you need to connect to it as your IRC server
 [ ** ] using the port that you supplied.  You have to supply your login info
 [ ** ] as the IRC server password like this: user/network:pass.
 [ ** ]
 [ ** ] Try something like this in your IRC client...
 [ ** ] /server &lt;znc_server_ip&gt; +5099 tejassanap:&lt;pass&gt;
 [ ** ]
 [ ** ] To manage settings, users and networks, point your web browser to
 [ ** ] https://&lt;znc_server_ip&gt;:5099/
 [ ** ]
 [ ?? ] Launch ZNC now? (yes/no) [yes]: yes
 [ .. ] Opening config [/home/xxxxx/.znc/configs/znc.conf]...
 [ » ] ok
 [ .. ] Loading global module [webadmin]...
 [ » ] [/usr/lib/znc/webadmin.so]
 [ .. ] Binding to port [+5099]...
 [ » ] ok
 [ ** ] Loading user [tejassanap]
 [ ** ] Loading network [freenode]
 [ .. ] Loading network module [simple_away]...
 [ » ] [/usr/lib/znc/simple_away.so]
 [ .. ] Adding server [chat.freenode.net +6697 ]...
 [ » ] ok
 [ .. ] Loading user module [chansaver]...
 [ » ] ok
 [ .. ] Loading user module [controlpanel]...
 [ » ] ok
 [ .. ] Forking into the background...
 [ » ] [pid: 27630]
 [ ** ] ZNC 1.6.6+deb1ubuntu0.2 - http://znc.in
```
After this process, we have a running ZNC process. To confirm that the process is running you can run `znc` command in the terminal. It should produce the following output
```bash
 ~ &gt; znc
 [ .. ] Checking for list of available modules...
 [ » ] ok
 [ .. ] Opening config [/home/xxxxx/.znc/configs/znc.conf]...
 [ !! ] ZNC is already running on this config.
 [ ** ] Unrecoverable config error.
 ```
## Step 3: Configure your ZNC setup using the webadmin UI.
With a running ZNC process, the best way to make changes is through the `webadmin` UI. To open the `webadmin` UI, open up an internet browser and type in `https://&lt;server-IP-address&gt;:&lt;port&gt;`. In my case it is, `https://35.244.43.39:5999/`. This opens up the login screen.

![](/assets/images/irc-setup-part3/ZNC-webadmin-login-page.png)
&lt;div class=&quot;image-caption&quot;&gt;
We need to use username and password created in the previous step.
&lt;/div&gt;

This brings us to the landing page. ZNC configuration is divided into two sections:
1. **Global Module settings** - These settings are **only visible** to users with admin privileges.
2. **User Module settings** - These are user-specific settings. In a multi-user setting, an admin would see different settings for different users.

This particular article will focus on a very simple setup. We will connect to the Freenode network on the `chat.freenode.net` server and join `#freenode` channel. Click on the *Your settings* option under *User Modules*.

![](/assets/images/irc-setup-part3/ZNC-webadmin-landing-page.png)
&lt;div class=&quot;image-caption&quot;&gt;
The landing page contains links to various global and user settings.
&lt;/div&gt;

On the *Your Settings* page we can see that the first three sections are the same as the first three sections in `znc --makeconf`.

![](/assets/images/irc-setup-part3/ZNC-webadmin-user-settings.png)
&lt;div class=&quot;image-caption&quot;&gt;
The user settings page.
&lt;/div&gt;

All the important changes are listed below (match the color of the *box* with the color of the *bullet*) :
&lt;ul class=&quot;ul-circles&quot;&gt;
	&lt;li style=&quot;color: #00a300;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;Add network&lt;/b&gt; - Look in the next section.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;color: #ff0097;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;Buffer size&lt;/b&gt; - Any arbitrary number is fine. &lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;color: #2d89ef;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;Auto Clear Chan Buffer&lt;/b&gt; - This checks if channel buffers are automatically cleared after playback. When disabled, messages are buffered even while clients are attached, and already seen messages may be repeated each time clients connect. This is important when multiple clients are connected.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;color: #7e3878;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;Auto Clear Query Buffer&lt;/b&gt; -This checks if query buffers are automatically cleared after playback. When disabled, messages are buffered even while clients are attached, and already seen messages may be repeated each time clients connect. This is important when multiple clients are connected.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;color: #ffc40d;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;Timezone&lt;/b&gt; - Set the appropriate timezone. &lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;color: #ee1111;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;Client Encoding&lt;/b&gt; - Try to use UTF-8 encoding, wherever possible. &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

### Add network and channel
In this section of the `webadmin` UI, we see the third type of modules, *network* modules. One of the many attractive features of ZNC is the network-wise configuration, it allows us to do.

![](/assets/images/irc-setup-part3/ZNC-webadmin-network-settings.png)
&lt;div class=&quot;image-caption&quot;&gt;
The network settings page.
&lt;/div&gt;

&lt;ul class=&quot;ul-circles&quot;&gt;
	&lt;li style=&quot;color: #00a300;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;Enable flood protection&lt;/b&gt; - Flooding is when a lot of messages are sent in quick succession. Normally, bots and servers are configured to kick users that spam a channel.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;color: #ff0097;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;Flood protection rate&lt;/b&gt; - The number seconds per line before the flood rate kick in.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;color: #7e3878;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;Flood protection burst&lt;/b&gt; - The number of lines that can be sent instantly.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;color: #2d89ef;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;Add channel&lt;/b&gt; - Look in the next paragraph.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;color: #ffc40d;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;&lt;i&gt;route_replies&lt;/i&gt; module&lt;/b&gt; - When using multiple clients, connecting to ZNC can sometimes send a lot of &lt;span class=&quot;pre&quot;&gt;/who&lt;/span&gt;'s. This module prevents that from happening.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;color: #ee1111;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;&lt;i&gt;sasl&lt;/i&gt; module&lt;/b&gt; - Enable SASL authentication instead of using the &lt;i&gt;nickserv&lt;/i&gt; module.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;color: #000000;&quot;&gt;&lt;span style=&quot;color: #000;&quot;&gt;&lt;b&gt;&lt;i&gt;simple_away&lt;/i&gt; module&lt;/b&gt; - Turns you &quot;away&quot; when you are disconnected from the IRC.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
The only puzzling part of network settings is where to put in the password for `nickserv`. This needs to be done using the *nickserv* module. On networks supporting SASL, ZNC can also use SASL. The process of enabling SASL requires us to configure the client first. **Thus, use the following only after you have connected the client to ZNC**:

```
/msg *sasl Mechanism PLAIN
/msg *sasl RequireAuth yes
/msg *sasl Set &lt;username&gt; [&lt;password&gt;]
```

![](/assets/images/irc-setup-part3/ZNC-webadmin-add-channel.png)
&lt;div class=&quot;image-caption&quot;&gt;
The channel settings page.
&lt;/div&gt;

Then we insert the name of the channel and save the configuration. We are finished with configuring ZNC.

## Connecting the client with ZNC.
The `irssi` client can be connected to znc using the following commands:
```
/network add freenode-znc
/server add -net freenode-znc -auto -ssl 35.244.43.39 5999 tejas/freenode:password
/save
/connect freenode-znc
```

![](/assets/images/irc-setup-part3/irssi-freenode.png)
&lt;div class=&quot;image-caption&quot;&gt;
The irssi statusbar shows that I have connected to my ZNC server.
&lt;/div&gt;

# Conclusion
There are still a lot of empty spaces. Knowing how to how to install third-party modules, is important. We will cover that in the next post. In the making of this blog, I heavily relied on `#znc` on Freenode and [ZNC](https://wiki.znc.in/ZNC). I highly recommend both the resources to anyone who uses ZNC.</content><author><name>Tejas Sanap</name></author><summary type="html">What is ZNC (and, BNC)? ZNC, is an advanced IRC bouncer that is left connected so an IRC client can disconnect/reconnect without losing the chat session. A BNC (short for Bounced Network Connection) is a piece of software that is used to relay traffic and connections in computer networks, much like a proxy. Basically, ZNC will act as a bridge between a client and the IRC server.</summary></entry><entry><title type="html">How to do IRC the right way (Part 2)</title><link href="http://localhost:4000/2019/06/13/IRC-part2/" rel="alternate" type="text/html" title="How to do IRC the right way (Part 2)" /><published>2019-06-13T00:00:00+05:30</published><updated>2019-06-13T00:00:00+05:30</updated><id>http://localhost:4000/2019/06/13/IRC-part2</id><content type="html" xml:base="http://localhost:4000/2019/06/13/IRC-part2/">## What's the problem?
One of the most annoying things about IRC is how it is not **persistent**. There are two halves of this **persistence** thing: 
1. IRC doesn't save the messages we have receive, the chats in which we are mentioned, etc., when *we are offline*.
2. IRC doesn't save our messages, logs and chats, when *we go offline*.

That's the problem we are going to solve in this article.

## What solutions are available?
### The easy but incomplete solution - `tmux` and a server
The most simple solution to this problem is to connect to IRC using a machine that is always running and connected to the internet. Yes, that means a server. And, then whenever we want to check what's going on our favourite channels, we simply SSH/connect to the server. From this point onwards, we will be using the term `server` to denote the machine that we have logged into to stay connected to IRC all the time. This is a practical solution, that a large number of people use. However, this solution comes with a few caveats:
1. The most obvious one is that we need access to a terminal. In order to ensure that the IRC-client is always running on the server most people will use `tmux` or `screen`, which they will attach-to or detach-to to use IRC. We may not always have access to a terminal or the right SSH credentials on the computer to SSH into our server.
3. Thus, we run into a major problem of this approach, which is it's *lack of ability* to connect with other IRC clients on seperate machines.
2. Most people don't have access to a computer all the time. So, a large section of IRC users, actually use their phones to chat on IRC. Having to use SSH on our phones to connect to an TUI-based IRC client, may not be very difficult, but it definitely isn't pleasant. An IRC user like me, who uses a phone 80% of the time to chat on IRC, needs to have a proper IRC client made to be used on phones. Having a clean UI on a small screen can make a ton of difference. This, I think, should be one of the main reasons why people should avoid this approach.
&lt;p float=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/irc-setup-part2/revolution-irc1.png&quot; width=&quot;200&quot; /&gt;
  &lt;img src=&quot;/assets/images/irc-setup-part2/revolution-irc2.png&quot; width=&quot;200&quot; /&gt;
  &lt;img src=&quot;/assets/images/irc-setup-part2/revolution-irc3.png&quot; width=&quot;200&quot; /&gt;
&lt;/p&gt;

4. This method doesn't allow us to maintain seperate buffers for seperate clients. Not having this may not be a deal breaker, but it's definitely makes things easier. It also, doesn't allow us to maintain a seperate list of channels on different clients/devices.

### The average but incomplete solution - `weechat`
I am, probably, going to get a lot of hate for this. Unlike the `tmux`+server approach, `weechat` will provide us with seperate UI's for seperate devices. But, all of those clients are still `weechat`, meaning we become tied to it's ecosystem. It still provides a great number of features, that a lot of people love. This solution has the following caveats:
1. Lack of portability meaning if we decide to shift to another IRC-client, we can't easily transfer all of our channel-lists, preferences and chat logs
2. We connect to the same instance of `weechat`, so it doesn't allow us to provide different configurations for different devices.

### The difficult but complete solution - `ZNC`
`ZNC` isn't an IRC client. Both of the solutions mentioned above used one particular client or one particular session. `ZNC` is an IRC bouncer. In very simple terms, it keeps us connected to the network from a remote machine and acts as a bridge between the IRC network and us. `ZNC` is capable of properly logging all the chats, maintaining different channel-lists for different clients and much more. The functionality of `ZNC` can be extended with the help of modules. Most importantly, ZNC gives us the freedom to use as many clients and as many different types of clients as we want. In addition it gives us fine control over what is sent to which client, and how much of it can be synced between two or more clients.

## Now, what?
IMHO, ZNC is the right way to do IRC. In the next article, we will discuss how to set up ZNC and connect to IRC.</content><author><name>Tejas Sanap</name></author><summary type="html">What’s the problem? One of the most annoying things about IRC is how it is not persistent. There are two halves of this persistence thing: IRC doesn’t save the messages we have receive, the chats in which we are mentioned, etc., when we are offline. IRC doesn’t save our messages, logs and chats, when we go offline.</summary></entry><entry><title type="html">How to do IRC the right way (Part 1)</title><link href="http://localhost:4000/2019/06/12/IRC-part1/" rel="alternate" type="text/html" title="How to do IRC the right way (Part 1)" /><published>2019-06-12T00:00:00+05:30</published><updated>2019-06-12T00:00:00+05:30</updated><id>http://localhost:4000/2019/06/12/IRC-part1</id><content type="html" xml:base="http://localhost:4000/2019/06/12/IRC-part1/">IRC which stands for Internet Relay Chat is one of the oldest methods of chatting across the internet. This piece of technology is as old as the internet, itself. Like, all great things about the internet it started with a Swede writing a program.

## What is IRC and why should you bother with it?

IRC is a text-based communication protocol. In very simple terms, it allows users to create #channels (or as we call them, chat rooms) where a group of people can chat together. It also offers numerous features like file transfers and SSL encryption. 

IRC networks are a great learning place. Numerous FOSS projects have their own IRC channels, where newbie users can go for help. One such channel is `#irssi`. It is also a great place to meet new people, with tons of experience.

IRC is an old-school technology. It is dying. In it's hayday IRC was the next dominant form of communication over the internet after email. Thus, it can be said, that using IRC is a way of saving a cultural symbol, from turning to ruin.

IRC is free and open. Contrary to what many may have you believe, it has a very simplistic design. However, it is not new-user friendly. For all it's ease, it has a few major issues.

## How does IRC work?

Like any communication protocol, it involves a client and server. The server, an IRC server, may be public or private.

One IRC network will have numerous IRC servers under it's wings. To connect to the IRC, you need both the network and server address.

There are numerous IRC clients just as we have numerous email clients. While, the choice of a client is very subjective, for the purpose of demonstration we will be using `irssi`. While, the choice of a client is very subjective, for the purpose of demonstration we will be using `irssi`. Every Linux distribution offers `irssi` as a binary in it's package repos. You can install it on Fedora like this: `sudo dnf install irssi -y`.

![](/assets/images/irc-setup-part1/irssi-ui.png)

## Let's get started.

1. Launch `irssi` in your terminal. You will be greeted by a weird-looking TUI. At the bottom, you will find a prompt. It will have the word `status` on it's left corner. This is like a window indicator. Currently you are in the `status` window which shows you all the information you are receiving from the network and server.

2. Type `/network` and press `&lt;Enter&gt;`. `irssi` will show you a list of networks that are stored in `irssi` by default. We wish to connect to the `Freenode` network.
![](/assets/images/irc-setup-part1/irssi-network-list.png)

3. Type `/connect Freenode` and press `&lt;Enter&gt;`. You will notice that you have connected to the `Freenode` network. Your `nick` is the name of the `$USER` you are logged in as. Your `nick` is like your User ID. Most people will reserve an unique `nick`, in order to prevent other people from impersonating them. `&lt;Pg-Up&gt;` and `&lt;Pg-Down&gt;` will help you scroll in the window. You will see a bunch of other stuff saying that you are not registered. For the purpose of this demonstration, you can safely ignore it.
![](/assets/images/irc-setup-part1/irssi-connect.png)

4. The next task is to join a channel. Type `/join #tejas` and press `&lt;Enter&gt;`. You will probably see a new window pop up and notice that the prompt title has changed from `status` to `#tejas`.
![](/assets/images/irc-setup-part1/irssi-join.png)

5. Say Hi!

6. Type `/msg whereistejas Hey! I made it here!` and press `&lt;Enter&gt;`. This will send a personal message to me. If, I'm online, we can have a nice chat. (P.S. I'm always online).

7. Let's try joining another channel called `#irssi`. To switch between different channels in `irssi` use `&lt;Alt&gt; + &lt;No. Key&gt;`. For example, `&lt;Alt&gt;+2` will take you back to the `#tejas` channel.

8. In case you need help, type `/help`.

9. Figure out how to quit on your own.

That wasn't difficult at all, was it?

## Conclusion

Now that you know how to connect to an IRC network and join a channel, you are ready to meet tons of new people. This is also the point, where we can start talking about the drawbacks of IRC:

1. There is no way to save or log messages that are sent to you when you are offline, i.e., not connected to an IRC network.

2. There is no way of recovering messages from a previous session in the current session, i.e., you lose everything once you `/quit`.

3. You can connect only one client to a network with one `nick`, i.e., you can only connect from one place at a time.

However, there are ways of overcoming the above mentioned issues, which will be part of the next article. We can see at once, how the above metioned issues are connected with one another.</content><author><name>Tejas Sanap</name></author><summary type="html">IRC which stands for Internet Relay Chat is one of the oldest methods of chatting across the internet. This piece of technology is as old as the internet, itself. Like, all great things about the internet it started with a Swede writing a program.</summary></entry><entry><title type="html">Linear Programming</title><link href="http://localhost:4000/2018/11/02/OR-LP/" rel="alternate" type="text/html" title="Linear Programming" /><published>2018-11-02T00:00:00+05:30</published><updated>2018-11-02T00:00:00+05:30</updated><id>http://localhost:4000/2018/11/02/OR-LP</id><content type="html" xml:base="http://localhost:4000/2018/11/02/OR-LP/">LP deals with the optimization of a function of variables known as *objective function/ cost function*, subject to a set of linear equations and/or inequalities called *constraints*.

#### Assumptions in LP

1. Proportionality: some sort of proportionality exists between the objective function and constraints.
2. Additivity: 
3. Continuity: decision variables can take any non-negative value that satisfies the constraints. However, some problems need integer values.
4. Certainty: all LP problems are assumed to be *deterministic*.
5. Finite Choices: a limited number of choices are available to the decision maker.

#### Formulation of LP problem.

**Step 1**: find the *key-decision* to be made by looking for variables.

**Step 2**: assume symbols for the variables and find the *extents* of variation.

**Step 3**: find *feasible alternatives* mathematically in terms of variables.

**Step 4**: mention the objective function *quantitavely*, as a linear function. Prepare a **cost function**.

**Step 5**: represent the *influencing factors* or **constraints** in mathematical terms.

#### Advantages of LP
1. attain optimum use of productive factors
2. improve quality of decisions
3. can handle multiple constraints
4. highlights the bottlenecks

#### Disadvantages of LP
1. for large problems there are too many limitations and constraints, this makes the problem too difficult to solve even with computers
2. the problems have to linearly approximated thus, the obtained results may be far from reality
3. only *static* situations can be dealt with
4. assume all values are known a priori with full certainty
5. sometimes, the objective function and constraints cant be expressed in linear form
6. multi-objective tasks cant be dealt with</content><author><name>Tejas Sanap</name></author><summary type="html">LP deals with the optimization of a function of variables known as objective function/ cost function, subject to a set of linear equations and/or inequalities called constraints.</summary></entry></feed>